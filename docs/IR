========== TODO ===========

=== STRUCTS ===
[ ] allow frontend to reorder, allign, and pad struct fields

=== INSTRUCTIONS ===
[ ] shift and rotate operators [+ carry]

========== BASICS ==========

=== GOALS ===
SSA [static single assigment]
GBDK compatibility
functions
labels
structs
[arrays = pointers, like C]

========== ABSTRACT ==========
DCC IR is the internal representation of the DCC toolset. it is the file type
that is emitted by frontends and consumed by backends. this helps multi
platform optimizations via the so-called "middle-end"- a machine agnostic
optimization/analysis pass which takes in DCC IR and outputs DCC IR.

DCC IR is a RTL in SSA form. it assumes that there is an infinite number of
typed registers, each assigned only once. it is job of the writer to make sure
those assumptions are held to ensure future consumers of the data don't have
to waste time to check them.

the types of the registers are described here.

DCC IR uses @PHI to denote the special phi function.

the syntax is described in something between Bison and Regex, any contibutions
are welcome.

=== TYPES ===
u8 u16 u32 u64         [>u<nsigned int]
i8 i16 i32 i64         [>i<nt]
       f32 f64         [>f<loat]
p farp                 [>p<ointer]
void

========== SYNTAX ==========
identifier:     [a-zA-Z@%_][a-zA-Z0-9@%_]*
decimal_number: [1-9][0-9]+
octal number:   0[0-7]+
hex number:     0x[0-9a-fA-F]+
comment:        \/\/.*$

=== STRUCTS ===
structs in DCC IR are the combination of unions and structs in C.
each field is consists of a name and an offset.
offset is in units of bytes+pointers.
pointers have different size depending on the backend.

struct identifier {
    type identifier ":" decimal_number "+" decimal_number "p" ";"
}

=== FUNCTIONS ===
a function consists of a return type, trait-list, name, argument list.
the trait-list is optional space separated list of traits- tools may either
use the information inside the trait-list or ignore it. 
for example, a function might be "pure" which means that it is stateless.

type [[trait-list]] identifier(arg-list) {
    loc-list
}

=== INSTRUCTIONS / STATEMENTS ===
loc: stmt
|    label ":" stmt
;

stmt:
    var_decl "=" ( const-or-var binop const-or-var ";"
                 | unop const-or-var ";"
                 | identifier "(" arg-list ")" ";" // function call
                 // NOTE: @PHI() is a special case of a function call!
                 )
|   "jmp" cond "," label ";"
|	"return" const-or-var? ";" // optional return value
;

unop: "!" | "-" | "*" | "&" | "~";
binop: "+" | "-" | "*" | "/" | "&" | "|" | "^" | "&&"
     | "||" | "mod" | "<<" | ">>";

var-decl: type identifier
label: identifier

type: "u8" | "u16" | "u32" | "u64"
|     "i8" | "i16" | "i32" | "i64"
|                    "f32" | "f64"
|     "p"  | "farp"
|     "void"
;

condop: "<" | ">" | ">=" | "<=" | "!=" | "==";

cond: condop ( "0"
             | "0xff"
             | "0xffff"
             | "0xffffff"
             | "0xffffffffffffffff"
             )
;

const-or-var: identifier
|             const
;

const: OCTALVAL
|      DECVAL
|      HEXVAL
|      "@OFFSET" "(" identifier "." identifier ")" 
       // this returns a constant representing the offset of a field within
       // a struct. the first identifier is the struct type, the second is
       // the name of the field.
|      "@SIZE" "(" identifier ")"
       // returns the size of a struct- like `sizeof` in C.
;

=== EXAMPLES ===

u8 [[ noninline pure ]] add(u8 lhs, u8 rhs) {
    u8 %tmp1 = lhs + rhs;                  // \ return lhs + rhs;
    return %tmp1;                          // /
}

u8 [[ noninline pure ]] fib(u8 i) {
  @start:
    u8 %tmp1 = i - 1;                      // \ if (i <= 1)  
    jmp <=0, @end                          // /     return;
    jmp after                              // [ fall-through, probably required for (e)bb ]
  @after:                                  // 
    u8 %tmp2 = i - 2;                      // \
    u8 %tmp3 = fib(%tmp1);                 // | uint_8 %tmp5 = fib(i - 1) + fib(i - 2);
    u8 %tmp4 = fib(%tmp2);                 // | return %tmp5;
    u8 %tmp5 = %tmp3 + %tmp4;              // /
    jmp return                             // 
  @end:                                    // 
    u8 %tmp6 = @PHI(@start, 1, @after, %tmp5) // [  return label, because  ]
    return %tmp6;                          // [ SSA requires >one< exit ]
}
